// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email    String @unique
  password String

  firstName String
  lastName  String

  description String?
  avatarPath  String?

  userProgress UserProgress[]
  role         UserRole       @default(STUDENT)
}

model Course {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title String
  slug  String @unique

  description String?
  thumbnail   String?

  views Int @default(0)

  lessons Lesson[]
}

model Lesson {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title String
  slug  String @unique

  description String?
  position    Int

  lessonUrl String?

  userProgress UserProgress[]

  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String
}

model UserProgress {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isCompleted Boolean @default(false)

  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId String

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  @@unique([userId, lessonId])
}

enum UserRole {
  STUDENT
  ADMIN
}
